
@startuml
class Game {
  + Name: String
  + Genre: String
  + MinPlayers: int
  + MaxPLayers: int
  + Condition: String
  + Price: double
  + HasInquiry: bool
  + Customer: Customer?
  
  + <<override>> ToString(): string
  + AddGameToDatabase(datahandler: Datahandler): void
  + SearchGames(datahandler: Datahandler): void
  + AddCustomerToGame(): Customer

}

class DataHandler {
  - filePath: string
  - userFilePath: string
  
  + AddGame(game: Game): void
  + LoadGames(): List<Game>
  + SearchGames(criteria: SearchCriteria): List<Game>
  + AddUser(user: User): void
  + LoadUsers(): List<User>
  + Login(criteria: UserSearchCriteria): bool

}


class SearchCriteria {
  + Name: String?
  + Genre: String?
  + Players: int?
  + Condition: String?
  + MinPrice: double?
  + MaxPrice: double?
  + HasInquiry: Bool?
  + Matches(game: Game): bool
}



class InventoryReport {
  + PrintInventoryMenu(games List<Game>): List<Game>
  - printInventoryByName(games List<Game>): List<Game>
  - printInventoryByGenre(games List<Game>): List<Game>
  + PrintInventory(games List<Game>): void
}

class User {
  + Name: String
  + Password: String
  + AddUserToDatabase(dataHandler: DataHandler)
  + LoginToInventory(dataHandler: DataHandler): bool
  - ReadPassword(): string
}

class Customer {
 + Name: string
 + Email: string
 + PhoneNum: string
 + Address: string[]
 
 + Customer(name: string, email: string, phoneNum: string, address: string[])
 
}

User "*"--"1" DataHandler: Login >
DataHandler "1" -- "*" Game : contains

Game "*" -- "1" Customer: has
DataHandler -- SearchCriteria : uses >
DataHandler -- SortCriteria : uses >
DataHandler -- InventoryReport : generates >
@enduml




@startuml
actor User
participant "UI/Controller" as Controller
participant Inventory
participant "SearchCriteria" as Criteria
participant Game
participant "InventoryReport" as Report

User -> Controller: searchGames(criteria)
Controller -> Inventory: searchGames(criteria)
create Criteria
Controller -> Criteria: new SearchCriteria(criteria)
Controller -> Inventory: searchGames(Criteria)
Inventory -> Criteria: matches(game)
loop for each game in inventory
    Criteria --> Inventory: true/false
end
Inventory --> Controller: List<Game>(matchingGames)
Controller --> User: Display matchingGames

User -> Controller: requestInventoryReport(SortCriteria.GENRE)
Controller -> Inventory: printInventoryReport(SortCriteria.GENRE)
Inventory -> Report: generateReport(SortCriteria.GENRE)
loop for each game in sorted order
    Report -> Inventory: getDetails(game)
end
Report --> Inventory: inventoryReport
Inventory --> Controller: Display inventoryReport
Controller --> User: Display Report

@enduml
